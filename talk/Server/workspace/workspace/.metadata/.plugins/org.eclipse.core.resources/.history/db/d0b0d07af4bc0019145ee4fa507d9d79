import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;


public class Server {

	static final int PORT=10001;
	ServerSocket serversocket;
	Socket socket;
	HashMap<String, Socket> hmSocket;
	DataInputStream is;
	DataOutputStream os;

	String msg="";
	boolean isConnected=true;
	
	public void StartServer(){
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				// TODO Auto-generated method stub
				try {
					//서버소켓 생성.
					serversocket=new ServerSocket(PORT);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					//서버에 접속하는 클라이언트 소켓 얻어오기(클라이언트가 접속하면 클라이언트 소켓 리턴)
					socket= serversocket.accept(); //서버는 클라이언트가 접속할 때까지 여기서 대기...

					//여기 까지 왔다는 것은 클라이언트가 접속했다는 것을 의미하므로
					//클라이언트와 데이터를 주고 받기 위한 통로구축..
					is= new DataInputStream(socket.getInputStream()); //클라이언트로 부터 메세지를 받기 위한 통로
					os= new DataOutputStream(socket.getOutputStream()); //클라이언트로 메세지를 보내기 위한 통로
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				//클라이언트가 접속을 끊을 때까지 무한반복하면서 클라이언트의 메세지 수신
				while(isConnected){
					try {
						//클라이언트로 부터 메세지가 전송되면 이를 UTF형식으로 읽어서 String 으로 리턴​
						msg=is.readUTF();
						System.out.println("zz"+msg);
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						break;
					}
					//받은 메세지 가지고 할거 여기다 코
				}
			}
		}).start(); //Thread 실행..
	}
}
